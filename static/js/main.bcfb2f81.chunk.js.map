{"version":3,"sources":["assets/twitter.svg","assets/instagram.svg","assets/github.svg","assets/linkedin.svg","assets/twitter-black.svg","lib/consts.js","components/Input.js","components/Print.js","lib/useDebounce.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CLAPS","MANICURES","Input","context","useContext","AppContext","setInputs","e","set","target","name","value","className","onChange","placeholder","id","maxLength","minRows","for","map","clap","mani","Print","number","useState","buttonText","setButtonText","textInput","useRef","textMerged","input","toUpperCase","split","join","emoji","length","Math","floor","random","lastEmoji","ref","onClick","current","_ref","select","document","execCommand","setTimeout","href","encodeURI","class","data-show-count","src","require","useDebounce","initialState","state","setState","debounce","trim","Footer","createContext","App","setInput","setEmoji","setLastEmoji","useEffect","console","log","Provider","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcfb2f81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter.cecb64a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram.46ab3886.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.40802df9.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.82def2a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter-black.92a09400.svg\";","export const CLAPS = [\"üëè\", \"üëèüèª\", \"üëèüèº\", \"üëèüèΩ\", \"üëèüèæ\", \"üëèüèø\"];\nexport const MANICURES = [\"üíÖ\", \"üíÖüèª\", \"üíÖüèº\", \"üíÖüèΩ\", \"üíÖüèæ\", \"üíÖüèø\"];\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { AppContext } from \"../App\";\nimport { CLAPS, MANICURES } from \"../lib/consts\";\nimport Textarea from \"react-textarea-autosize\";\nexport default function Input() {\n  const context = useContext(AppContext);\n  const setInputs = e => {\n    context.set[e.target.name](e.target.value);\n  };\n  return (\n    <div className=\"input\">\n      <div className=\"input-field\">\n        <label>Write some stuff here:</label>\n        <Textarea\n          onChange={setInputs}\n          placeholder=\"Right here\"\n          name=\"input\"\n          id=\"input\"\n          maxLength=\"280\"\n          minRows={3}\n        ></Textarea>\n      </div>\n      <div className=\"input-select\">\n        <label for=\"emoji\">What kind of emoji do you want?</label>\n        <select onChange={setInputs} name=\"emoji\" id=\"emoji\">\n          {CLAPS.map(clap => (\n            <option value={clap}>{clap}</option>\n          ))}\n          <option value=\"random\">random</option>\n        </select>\n      </div>\n      <div className=\"input-endwith\">\n        <label for=\"lastEmoji\">What should I end it with?</label>\n\n        <select onChange={setInputs} name=\"lastEmoji\" id=\"lastEmoji\">\n          <option value=\"\">blank</option>\n          {CLAPS.map(clap => (\n            <option value={clap}>{clap}</option>\n          ))}\n          {MANICURES.map(mani => (\n            <option value={mani}>{mani}</option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n}\n","import React, { useContext, useRef, useState } from \"react\";\nimport { AppContext } from \"../App\";\nimport Textarea from \"react-textarea-autosize\";\nimport { CLAPS } from \"../lib/consts\";\n\nfunction randomNum(number) {\n  return Math.floor(Math.random() * (number - 1));\n}\nexport default function Print() {\n  const context = useContext(AppContext);\n  const [buttonText, setButtonText] = useState(\"Copy text!\");\n  const textInput = useRef(null);\n  const textMerged = `${context.input\n    .toUpperCase()\n    .split(\" \")\n    .join(\n      ` ${\n        context.emoji === \"random\"\n          ? CLAPS[randomNum(CLAPS.length)]\n          : context.emoji\n      } `\n    )} ${context.lastEmoji}`;\n  return (\n    <div>\n      <Textarea\n        ref={textInput}\n        className=\"output\"\n        value={textMerged}\n      ></Textarea>\n      <div className=\"buttons-wrapper mv-5\">\n        <button\n          onClick={() => {\n            textInput.current._ref.select();\n            document.execCommand(\"copy\");\n            setButtonText(\"Copied!\");\n            setTimeout(() => {\n              setButtonText(\"Copy text!\");\n            }, 1000);\n          }}\n          className=\"btn btn-primary\"\n        >\n          {buttonText}\n        </button>\n        <a\n          href={`https://twitter.com/intent/tweet?text=${encodeURI(\n            textMerged\n          )}&via=39strife&hashtags=sassify`}\n          class=\"btn btn-twitter\"\n          data-show-count=\"false\"\n        >\n          <img src={require(\"../assets/twitter.svg\")} />\n          Tweet this sass\n        </a>\n      </div>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { debounce } from \"debounce\";\n\nexport const useDebounce = ({ initialState = \"\" }) => {\n  const [state, setState] = useState(initialState);\n  const withDebounce = debounce(e => {\n    setState(e.trim());\n  }, 200);\n  return [state, withDebounce];\n};\n","import React from \"react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"wrapper\">\n      <p>developed under MIT licence</p>\n      <p>\n        by <a href=\"https://alekangelov.com\">Alek Angelov</a>\n      </p>\n      <ul className=\"socials\">\n        <li>\n          <a href=\"https://www.instagram.com/angelov.alek\">\n            <img src={require(\"../assets/instagram.svg\")} />\n          </a>\n        </li>\n        <li>\n          <a href=\"https://www.github.com/alekangelov\">\n            <img src={require(\"../assets/github.svg\")} />\n          </a>\n        </li>\n        <li>\n          <a href=\"https://www.linkedin.com/in/alekangelov\">\n            <img src={require(\"../assets/linkedin.svg\")} />\n          </a>\n        </li>\n        <li>\n          <a href=\"https://www.twitter.com/39strife\">\n            <img src={require(\"../assets/twitter-black.svg\")} />\n          </a>\n        </li>\n      </ul>\n    </footer>\n  );\n}\n","import React, { createContext, useEffect } from \"react\";\nimport Input from \"./components/Input\";\nimport Print from \"./components/Print\";\nimport { useDebounce } from \"./lib/useDebounce\";\nimport { CLAPS, MANICURES } from \"./lib/consts\";\nimport Footer from \"./components/Footer\";\n\nexport const AppContext = createContext({});\n\nfunction App() {\n  const [input, setInput] = useDebounce({});\n  const [emoji, setEmoji] = useDebounce({ initialState: CLAPS[0] });\n  const [lastEmoji, setLastEmoji] = useDebounce({ initialState: \"\" });\n  useEffect(() => {\n    console.log(input, emoji, lastEmoji);\n  }, [input, emoji, lastEmoji]);\n  return (\n    <div className=\"wrapper\">\n      <div className=\"title\">\n        <h1>\n          <span>SASSIFY</span> üíÖ\n        </h1>\n        <h2>MAKE üëè IT üëè CLAP üëè</h2>\n        <AppContext.Provider\n          value={{\n            input,\n            emoji,\n            lastEmoji,\n            set: {\n              input: setInput,\n              emoji: setEmoji,\n              lastEmoji: setLastEmoji\n            }\n          }}\n        >\n          <Input />\n          <Print />\n        </AppContext.Provider>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./style/index.scss\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}